#+STARTUP: indent
* CMPSC473 Notes

** Topic 1 -- Bit Manipulation
*** Why Hex?
- arises from it being difficult to represent numbers in binary or decimal
- its like an intermediate form. binary is too verbose whereas decimal takes time to convert.
- hex is easy to represent and convert -- in C they are prefixed by 0x
- each digit in a hex number is 4 bits long from 0000 to 1111 -- 16 different numbers from 0-F
*** Bitmasks
  0x12345678
& 0x00FF0000
  ___________
  0x00340000
Literally like a mask
*** Word size
- determines how large the address space is going to be for a machine
- is equal to 2^(word_size) number of bytes 
- 32-bit machine has about 4gb number of bytes as address space
*** How to negate a hex?
- take 2's complement
- for example,10 in hex is A and in binary is 1010
- for -10 take 2's complement i.e. 0101+1 = 0110 which is 6 in hex
- 1010 + 0101 ignoring carry gives 0000 i.e. 10 + (-10) = 0
*** memcpy vulnerability
- ~void* memcpy(void* dest, void* src, size_t n)~ -- here n is an unsigned integer
- if we pass a negative number it will be interpreted incorrectly because it will be cast as an unsigned number with the MSB as 1
** Topic 2 -- C Programming and intro to OS
*** Pointer Arithmetic
- pointers in C are denoted using <data_type>* <identifier>;
- they represent the memory address of the stored variable.
- different datatypes have different pointer increment sizes i.e. for char its 1 byte, for int its 4 bytes
- thus if int* p = 0x1000 ==> p+1 = 0x1004 because its increment size is 4 bytes
*** Structure Alignment
- this is an optimization done by processors to reduce read and write time. 
- for a 32-bit machine the word size is 4 bytes. thus, the processor can read 4 bytes at a time
- let us assume the following struct:
#+BEGIN_SRC c
struct{
 int a1;
 int a2;
 char c1;
 char c2;
 float f1;
}
#+END_SRC
- this data will not be stored sequentially but will be padded to optimize read times.
- say address begins from 0x1000
- the addressing will be as follows:
| 0x1000 | 0x1001 | 0x1002 | 0x1003 |
|     a1 |     a1 |     a1 |     a1 |
| 0x1004 | 0x1005 | 0x1006 | 0x1007 |
|     a2 |     a2 |     a2 |     a2 |
| 0x1008 | 0x1009 | 0x100A | 0x100B |
|     c1 |     c2 |  ***** |  ***** |
| 0x100C | 0x100D | 0x100E | 0x100F |
|     f1 |     f1 |     f1 |     f1 |
- as you can see 0x100A and 0x100B are padded so that f1 can be read fast
*** Include Guards
#+BEGIN_SRC c
#ifndef HEADER_FILE_H
#define HEADER_FILE_H
/*code goes here*/
#endif
#+END_SRC
read the [[https://en.wikipedia.org/wiki/Include_guard][wiki]] for include guards
*** Process Layout
- consists of threads and memory
- memory divided into following segments:
| stack : current state of execution, local variables and scope, grows downward |
| heap : malloc, dynamically allocated, grows upward                            |
| text : consists of instructions to be executed + read only data               |
| data : global vars, static vars                                               |
*** Strings
- strings are defined in c using : char <identifier>[length];
- here length = length_of_string + 1 as all c strings are null terminated by '\0'
- a lot of standard string functions do not check buffer overflows when performing their respective operations. avoid using them.
- the functions should have the following properties:
  - bounded use : should be withing the defined memory region
  - null-terminated : all c-strings should be null terminated within the bound
  - truncation notified ---(?) : should be warned if strings get truncated
-most arent ----- ? <this part is sketchy in the ppt, pay attention during lectures>
*** Von-Neumann Computer
consists of 5 parts : store (memory), control (cpu), ALU, input and output
*** Instruction Set Architecture
<bs, skip this>
*** Need for an OS
_?An OS is software that allows multiple programs to run on the same computer?._
a computer has a lot of resources -- memory, cpu cycles, cache, I/O etc.
when muliple programs want to access the same resource, there will be a conflict.
there is a need for a policy -- either _program driven_ i.e. trust the program to give up a resource once it doesn't need it or _hardware driven_ -- establish a rigid policy to allocate resources to programs. both of these have their caveats. to overcome -- OS.

to solve these problems, an operating system does three things:
1. virtualizes resources
2. persists data
3. enables concurrency
*** History of OS
<read the slides>
** Topic 3 - Process
*** Supervisor and User Modes
supervisor is basically root -- os runs its own programs in supervisor mode -- kernel stuff -- called ring 0
user mode is where the OS loads all processes -- ring 3
refer to process layout here
[[process_layout][process layout]]

*** OSTEP -- Chapter 4 -- The Abstraction: The Process
- A process is a running program
- In a computer there is once CPU but many programs -- so the OS provides the virtualization of dedicated CPUs for each program
- It does so using time-sharing for concurrency
- We need _low-level machinery_ and _high-level intelligence_ to pull this off
- Various parameters of a process define its _machine state_:
  - address space -- memory that the process _can_ address
  - program counter, stack pointer, frame pointer
  - accessed files and devices
- The Process API:
  - create -- self-explanatory
  - destroy -- ability to premptively destroy processes -- Ctrl+C/Z
  - wait -- wait for a process to stop running
  - misc control -- e.g. ability to suspend and resume a process
  - status -- runtime, state etc.
- Process Creation:
  - first the program's code + static data is loaded from its executable format from the disk to main memory. this can be done all at once called _eager loading_ or done in batches called _lazy loading_.
  - next, the OS allocates memory for the stack -- this is needed for local vars, function params and return addresses
  - it also may allocate memory for the heap -- this can be dynamically allocated and deallocated using ~malloc()~ and ~free()~ in C
  - other init tasks related to I/O and then it jumps to ~main()~
- Process States:
  - running --
  - ready -- ready to be run but CPU is not running it right now
  - blocked -- it has performed some task that makes it not ready to continue running and it waits -- e.g. reading I/O from disk
- The Process Data Structure:
refer to it here [[img/xv6-process-data-structure.png]]

*** OSTEP -- Chapter 5 -- Interlude: Process API
- We will discuss various system calls in the Process API
- ~fork()~:
  - its strange
  - a fork call returns a PID
  - internally what happens is that the OS creates one more process with an _almost_ identical structure -- except the PID and where the child process starts running
  - the child process wont start from ~main()~ but from the ~fork()~ call
  - the child process will recieve the PID 0 from ~fork()~ -- means itself
  - the parent process will recieve the PID of the child from ~fork()~
  - think of them as separate threads --  thus the output after a ~fork()~ is _non-deterministic_
  - refer to the following code:
#+BEGIN_SRC c
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main(int argc, char *argv[]){
  printf("hello world (pid:%d) \n", (int)getpid());
  int rc = fork();
  if(rc < 0){
    fprintf(stderr, "fork failed\n");
    exit(1);
  }
  else if(rc == 0){
    printf("hello, I am child (pid:%d)\n", (int) getpid());
  }
  else{
    printf("hello, I am parent of %d (pid:%d)\n",rc,(int)getpid());
  }
  return 0;
}

#+END_SRC


- ~wait()~:
  - waits for the child process to end to continue execution
  - makes the program _deterministic_
  - in the code below, wc is the PID of the child process for which its waiting

#+BEGIN_SRC c
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main(int argc, char *argv[]){
  printf("hello world (pid:%d) \n", (int)getpid());
  int rc = fork();
  if(rc < 0){
    fprintf(stderr, "fork failed\n");
    exit(1);
  }
  else if(rc == 0){
    printf("hello, I am child (pid:%d)\n", (int) getpid());
  }
  else{
    int wc = wait(NULL);
    printf("hello, I am parent of %d (pid:%d)\n",rc,(int)getpid());
  }
  return 0;
}
#+END_SRC

- ~exec()~:
  - Its actually a family of functions -- run ~man exec 3~ to find out more
  - ~fork()~ makes a copy of itself whereas ~exec()~ calls a different program
  - an ~exec()~ call does not return to its parent -- rather the code, static data, stack and heap are replaced almost as if the exec'ed program was the original process -- a new process is _not_ created

*** Back to PPT
- PCB -- Process control block -- basically the data structure used by the OS to store the state etc. for a process
- Parent forks a child -- which might fork or exec -- and so on.. this forms a _process tree_
*** Process Loading
- Each program is stored in a binary executable format called ELF -- Executable and Linkable Format
- Contains 2 parts:
  - Program sections which contains text, data etc.
  - Program segments -- what to load at runtime
- Source to Program to Process
  - .c to ELF via cc (source to program)-- then the a.out gets _loaded_ by a dynamic loader (program to process) -- the process _adds dynamic libs_ using the dynamic linker
- How does the OS load binaries?
  - Load the Program Interpreter -- segtype: PT_INTERP -- run by ~exec()~
  - The interpreter loads the loadable segments -- the text, global, static data -- segtype: PT_LOAD
  - Other dynamic segments including the libs are loaded _when needed_
<ppt is quite sparse -- pay attention in class>



** Topic 4 -- CPU Virtualization
When multiple processes want to run on one CPU the Operating System _virtualizes_ the CPU to give an illusion to each process that it is the only one running

let's consider two processes running concurrently on a CPU
We look at undesirable events that a process might do while running concurrently

*** Executing Privileged Instructions
- A process should not be allowed to run a subset of the ISA known as privileged instructions -- could be disastrous
- Privileged Instructions: _Security-sensitive_ instructions should not be allowed to be run by process these include an instruction that might _affect another process_ or _snoop data of another process_. These instructions are only run by the OS not its processes.


*** Error Conditions -- seg faults, divide by zero etc.
*** So what to do?
- Use _traps_
- The CPU is designed s.t. whenever an error occurs or a process executes a privileged instruction -- it jumps to an error-like state and hands control over to the OS
- Programs can use special calls (~INT~ on x86 CPUs) to raise traps
- on detecting a trap the CPU:
  - saves process state
  - transfers control to OS's trap handler
  - restore process state and resume
- how will the CPU detect if a provileged instruction has been executed?
- It uses modes -- 2 -- _user mode_ and _kernel mode_
- _rings_ in x86 -- ring 0 for OS and ring 3 for processes












